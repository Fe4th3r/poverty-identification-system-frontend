{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport UserLogin from '../components/UserLogin.vue';\nimport UserRegister from '../components/UserRegister.vue';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'UserLogin',\n  component: UserLogin\n}, {\n  path: '/register',\n  name: 'UserRegister',\n  component: UserRegister\n}\n// 可以在这里添加更多路由，例如：\n// {\n//   path: '/',\n//   name: 'Home',\n//   component: Home // 假设你有一个 Home 组件\n//   meta: { requiresAuth: true } // 可以添加 meta 字段来标记需要登录才能访问的路由\n// }\n];\nconst router = new VueRouter({\n  mode: 'history',\n  // 使用 history 模式，去掉 URL 中的 # 号\n  base: process.env.BASE_URL,\n  routes\n});\n\n// 全局前置守卫 (可以在这里添加登录状态检查)\n// router.beforeEach((to, from, next) => {\n//   if (to.matched.some(record => record.meta.requiresAuth)) {\n//     // 如果路由需要身份验证\n//     if (!localStorage.getItem('user')) {\n//       // 如果用户未登录，则重定向到登录页面\n//       next({\n//         path: '/login',\n//         query: { redirect: to.fullPath } // 将目标路由作为参数传递给登录页面，以便登录后跳转回目标路由\n//       })\n//     } else {\n//       next() // 否则，允许访问路由\n//     }\n//   } else {\n//     next() // 如果路由不需要身份验证，则直接允许访问\n//   }\n// })\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","UserLogin","UserRegister","use","routes","path","name","component","router","mode","base","process","env","BASE_URL"],"sources":["C:/Users/Administrator/poverty-identification-system-frontend/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport UserLogin from '../components/UserLogin.vue'\r\nimport UserRegister from '../components/UserRegister.vue'\r\n\r\nVue.use(VueRouter)\r\n\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    name: 'UserLogin',\r\n    component: UserLogin\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'UserRegister',\r\n    component: UserRegister\r\n  },\r\n  // 可以在这里添加更多路由，例如：\r\n  // {\r\n  //   path: '/',\r\n  //   name: 'Home',\r\n  //   component: Home // 假设你有一个 Home 组件\r\n  //   meta: { requiresAuth: true } // 可以添加 meta 字段来标记需要登录才能访问的路由\r\n  // }\r\n]\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history', // 使用 history 模式，去掉 URL 中的 # 号\r\n  base: process.env.BASE_URL,\r\n  routes\r\n})\r\n\r\n// 全局前置守卫 (可以在这里添加登录状态检查)\r\n// router.beforeEach((to, from, next) => {\r\n//   if (to.matched.some(record => record.meta.requiresAuth)) {\r\n//     // 如果路由需要身份验证\r\n//     if (!localStorage.getItem('user')) {\r\n//       // 如果用户未登录，则重定向到登录页面\r\n//       next({\r\n//         path: '/login',\r\n//         query: { redirect: to.fullPath } // 将目标路由作为参数传递给登录页面，以便登录后跳转回目标路由\r\n//       })\r\n//     } else {\r\n//       next() // 否则，允许访问路由\r\n//     }\r\n//   } else {\r\n//     next() // 如果路由不需要身份验证，则直接允许访问\r\n//   }\r\n// })\r\n\r\nexport default router"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,YAAY,MAAM,gCAAgC;AAEzDH,GAAG,CAACI,GAAG,CAACH,SAAS,CAAC;AAElB,MAAMI,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEN;AACb,CAAC,EACD;EACEI,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,cAAc;EACpBC,SAAS,EAAEL;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACD;AAED,MAAMM,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BS,IAAI,EAAE,SAAS;EAAE;EACjBC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BT;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeI,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}